*template.txt*	Powerful template engine/plugin for vim
Wu Zhenyu                                                           *template*

==============================================================================
CONTENTS                                                   *template-contents*
  1. Introduction.............................................|template-intro|
  2. Configuration...........................................|template-config|
  3. Commands..............................................|template-commands|
  4. Functions............................................|template-functions|

==============================================================================
INTRODUCTION                                                  *template-intro*

<doc/template.txt> is generated by <https://github.com/google/vimdoc>. See
<README.md> for more information about installation and screenshots.

Currently, template supports the following syntaxes:

  1. `{# comment #}`: the comment will be ignored.
  2. `{{ expression }}` the vimscript expression will be evaled by vim.
  3. `{% here %}` the cursor will jump to here.
  4. `{{-comment-}}` the white spaces in the side of `-` will be removed.
    Similar for other marks.
  5. `\{\{text\}\}` will be converted to `{{text}}`. Similar for other marks.

The syntax highlight can be provided by vim's jinja2 plugin.

==============================================================================
CONFIGURATION                                                *template-config*

==============================================================================
COMMANDS                                                   *template-commands*

:[range]Template[!]                                                *:Template*
  Command to expand template.

  Both of the following n, m are positive integers. The `[fname]` is
  `expand('%:p')` by default. See |%:p|.

    1. Replace the lines from n-th to m-th by a template:

>
      :n,mTemplate [fname]
<
    2. Insert the template after n-th line:

>
      :nTemplate [fname]
<
    3. Insert the template before n-th line:

>
      :nTemplate! [fname]
<
    4. Insert the template after current line:

>
      :Template [fname]
<
    5. Insert the template before current line:

>
      :Template! [fname]
<
  By default, |BufNewFile| will call `:1,1Template` by |autocmd|, which will
  replace the buffer by the template (A new buffer only have one line). You
  can use the following code to disable this |autocmd|. See |augroup|.
>
      augroup template
        autocmd!
      augroup END
<

:TemplateCreate [regular_expression]                         *:TemplateCreate*
  The template file should be a URL encode of regular expression. You can
  `:TemplateCreate edit [regular_expression]` then vim will open the encoded
  filename for you.

  By default, [regular_expression] is `b:template`, if it exists, else warn.
  If template fill a template automatically for a file, it will set
  `b:template`, so you can `:TemplateCreate split` to edit the template.

  Command to create template. You can use |<mods>| like:
>
      :vertical TemplateCreate split \.c$ \.py$
<
  The first argument can be |:edit|, |:split|, etc. The other arguments are
  regular expressions.

==============================================================================
FUNCTIONS                                                 *template-functions*

template#create({mod}, {cmd})                              *template#create()*
  Create a template. use {cmd} to open the templates. First, search this
  template in `l:dirs`, if so, open it. if not, create it in the `l:dirs[0]`
  and open it.

template#expand({range}, {line1}, {line2}, {bang}, {fname})
                                                           *template#expand()*
  Expand a template. See |:Template| to know its usage.

template#find({fname}, {dir})                                *template#find()*
  Find regular expression which matches {fname} in {dir}. If not found, return
  ''.

template#expand_comment()                          *template#expand_comment()*
  Expand inline comments.

template#expand_variable()                        *template#expand_variable()*
  Expand variables.

template#expand_directive()                      *template#expand_directive()*
  Expand directives.


vim:tw=78:ts=8:ft=help:norl:
