*template.txt*	Powerful template engine/plugin for vim
Wu Zhenyu                                                           *template*

==============================================================================
CONTENTS                                                   *template-contents*
  1. Introduction.............................................|template-intro|
  2. Configuration...........................................|template-config|
  3. Commands..............................................|template-commands|
  4. Functions............................................|template-functions|

==============================================================================
INTRODUCTION                                                  *template-intro*

<doc/template.txt> is generated by <https://github.com/google/vimdoc>. See
<README.md> for more information about installation and screenshots.

Currently, template supports the following syntaxes:

  1. `{# comment #}`: the comment will be ignored.
  2. `{{ expression }}` the vimscript expression will be evaled by vim.
  3. `{% here %}` the cursor will jump to here.
  4. `{{-comment-}}` the white spaces in the side of `-` will be removed.
    Similar for other marks.
  5. `\{\{ text \}\}` will be converted to `{{ text }}`. Similar for other
    marks.

The syntax highlight can be provided by vim's jinja2 plugin.

==============================================================================
CONFIGURATION                                                *template-config*

                                                         *template:b:template*
Configure the template which current file uses.
Default: l:found `

                                       *template:g:template#utils#directories*
Configure the directories which store templates. "%"s of template name will be
substituted to "*" for glob matching. The default value is:

  1. neovim

>
    let g:template#utils#directories += [
         \ stdpath('config') . '/templates',
         \ ]
<
  2. vim

>
    let g:template#utils#directories += [
         \ expand('~/.vim/templates'),
         \ ]
 - Default: s:dirs `
<

==============================================================================
COMMANDS                                                   *template-commands*

:[range]Template[!]                                                *:Template*
  Command to expand template.

  Both of the following n, m are positive integers. The `[fname]` is
  `expand('%:p')` by default. See |%:p|.

    1. Replace the lines from n-th to m-th by a template:

>
      :n,mTemplate [fname]
<
    2. Insert the template after n-th line:

>
      :nTemplate [fname]
<
    3. Insert the template before n-th line:

>
      :nTemplate! [fname]
<
    4. Insert the template after current line:

>
      :Template [fname]
<
    5. Insert the template before current line:

>
      :Template! [fname]
<
  By default, |BufNewFile| will call `:1,1Template` by |autocmd|, which will
  replace the buffer by the template (A new buffer only have one line). You
  can use the following code to disable this |autocmd|. See |augroup|.
>
      augroup template
        autocmd!
      augroup END
<

==============================================================================
FUNCTIONS                                                 *template-functions*

template#expand({range}, {line1}, {line2}, {bang}, {fname})
                                                           *template#expand()*
  Expand a template. See |:Template| to know its usage.

template#find({fname}, {dir})                                *template#find()*
  Find template path which matches {fname} in {dir}. If not found, return ''.

template#match({fname}, {template_name})                    *template#match()*
  Judge if {fname} match {template_name}.

template#sort({this}, {that})                                *template#sort()*
  Sort template paths {this} and {that}. Priority is decided by:

    1. as more as count of "/" of path

  tests/CMakeList.txt > CMakeList.txt

    2. as less as count of "%" of path

  CMakeList.txt > %.txt

    3. as long as path

  test_%.py > %.py

template#expand_comment()                          *template#expand_comment()*
  Expand inline comments.

template#expand_variable()                        *template#expand_variable()*
  Expand variables.

template#expand_directive()                      *template#expand_directive()*
  Expand directives.

template#complete#expand({arglead}, {cmdline}, {cursorpos})
                                                  *template#complete#expand()*
  Complete |:Template|.

template#complete#find_all({fname}, {dir})      *template#complete#find_all()*
  Find all template paths which matches {fname} in {dir}. If {fname} is '',
  return all template paths in {dir}.

template#complete#get_files({dir})             *template#complete#get_files()*
  Find all files in {dir}.

template#utils#init()                                  *template#utils#init()*
  Init template syntax.

  Use |b:current_syntax|'s language server. Source |b:current_syntax|'s
  syntax, then source vim_template's syntax.


vim:tw=78:ts=8:ft=help:norl:
