Describe template
  Before all
    let g:test_path = fnamemodify(resolve(expand('<sfile>:p')), ':h') . '/test'
    let g:template#utils#directories = [g:test_path . '/templates']
    let g:expected = readfile(g:test_path . '/expected/test.c')
    let g:expected[2] = substitute(g:expected[2], '2023', strftime('%Y'), 'g')
    execute 'source' g:test_path . '/init.vim'
    filetype on
    edit test.c
  End
  It check {% here %}
    Assert Equals(line('.'), 9)
  End
  It check b:template
    Assert Equals(b:template, g:template#utils#directories[0] . '/%.c')
  End
  It check find
    Assert Equals(template#find('test.c', g:template#utils#directories), g:template#utils#directories[0] . '/%.c')
  End
  It check not find
    Assert Equals(template#find('test.py', g:template#utils#directories), '')
  End
  It check autocmd template
    Assert Equals(getline(1, '$'), g:expected)
  End
  It check :m,nTemplate
    2,$-1Template
    Assert Equals(getline(1, '$'), g:expected[0:0] + g:expected + g:expected[-1:-1])
  End
  It check :m,nTemplate!
    1,$-1Template!
    Assert Equals(getline(1, '$'), g:expected + g:expected[-1:-1])
  End
  It check :nTemplate
    2,$delete
    Template
    Assert Equals(getline(1, '$'), g:expected[0:0] + g:expected)
  End
  It check :nTemplate!
    2,$delete
    Template!
    Assert Equals(getline(1, '$'), g:expected + g:expected[0:0])
  End
End
