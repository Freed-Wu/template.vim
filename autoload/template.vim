""
" @section Introduction, intro
" @library
" <doc/@plugin(name).txt> is generated by <https://github.com/google/vimdoc>.
" See <README.md> for more information about installation and screenshots.
"
" Currently, @plugin(name) supports the following syntaxes:
"
" 1. `{# comment #}`: the comment will be ignored.
" 2. `{{ expression }}` the vimscript expression will be evaled by vim.
" 3. `{% here %}` the cursor will jump to here.
" 4. `{{-comment-}}` the white spaces in the side of `-` will be removed.
"    Similar for other marks.
" 5. `\{\{ text \}\}` will be converted to `{{ text }}`. Similar for other marks.
"
" The syntax highlight can be provided by vim's jinja2 plugin.

""
" Expand a template. See |:Template| to know its usage.
function! template#expand(range, line1, line2, bang, fname) abort
  if a:fname ==# ''
    let l:fname = expand('%:p')
  else
    " expand '~'
    let l:fname = expand(a:fname)
    " make sure it is a full path.
    if l:fname[0] !=# '/'
      let l:fname = getcwd() . '/' . l:fname
    endif
  endif
  let l:found = template#find(l:fname)
  if l:found ==# ''
    return
  endif
  if exists('b:template')
    unlet b:template
  endif
  ""
  " Configure the template which current file uses.
  call g:template#utils#plugin.Flag('b:template', l:found)
  if a:range != 2 && a:bang ==# '!'
    let l:line = a:line2 - 1
  else
    let l:line = a:line2
  endif
  silent execute 'keepalt' l:line . 'r' fnameescape(b:template)
  if a:range == 2
    execute a:line1 . ',' . a:line2 . 'delete'
  endif
  silent call template#expand_comment()
  silent call template#expand_variable()
  silent call template#expand_directive()
endfunction

""
" Find template path which matches {fname} in {dir}.
" If not found, return ''.
function! template#find(fname, ...) abort
  let l:dirs = get(a:000, 0, g:template#utils#directories)
  let l:results = template#complete#find_all(a:fname, l:dirs)
  call sort(l:results, 'template#sort')
  return get(l:results, 0, '')
endfunction

""
" Judge if {fname} match {template_name}.
function! template#match(fname, template_name) abort
  let l:glob = substitute(a:template_name, '%', '*', 'g')
  let l:re = substitute(glob2regpat(l:glob), '\^', '/', '')
  return a:fname =~# l:re
endfunction

""
" Sort template paths {this} and {that}. Priority is decided by:
"
" 1. as more as count of "/" of path
"
" tests/CMakeList.txt > CMakeList.txt
"
" 2. as less as count of "%" of path
"
" CMakeList.txt > %.txt
"
" 3. as long as path
"
" test_%.py > %.py
function! template#sort(this, that) abort
  if count(a:this, '/') < count(a:that, '/')
    return 1
  elseif count(a:this, '/') > count(a:that, '/')
    return -1
  elseif count(a:this, '%') > count(a:that, '%')
    return 1
  elseif count(a:this, '%') < count(a:that, '%')
    return -1
  elseif len(a:this) < len(a:that)
    return 1
  elseif len(a:this) > len(a:that)
    return -1
  endif
  return 0
endfunction

" vint: -ProhibitCommandRelyOnUser -ProhibitCommandWithUnintendedSideEffect

""
" Expand inline comments.
function! template#expand_comment() abort
  %s/\m{# .\{-} #}//ge
  %s/\m\s*{#-.\{-} #}//ge
  %s/\m{# .\{-}-#}\s*//ge
  %s/\m\s*{#-.\{-}-#}\s*//ge
  " restore {#.\{-}#}
  %s/\m\\{\\#\(.\{-}\)\\#\\}/{#\1#}/ge
endfunction

""
" Expand variables.
function! template#expand_variable() abort
  %s/\m{{ \(.\{-}\) }}/\=eval(submatch(1))/ge
  %s/\m\s*{{-\(.\{-}\) }}/\=eval(submatch(1))/ge
  %s/\m{{ \(.\{-}\)-}}\s*/\=eval(submatch(1))/ge
  %s/\m\s*{{-\(.\{-}\)-}}\s*/\=eval(submatch(1))/ge
  " restore {{.\{-}}}
  %s/\m\\{\\{\(.\{-}\)\\}\\}/{{\1}}/ge
endfunction

""
" Expand directives.
function! template#expand_directive() abort
  0  " Go to first line before searching
  let l:column = 0
  let l:lineno = 0
  if search('{%[- ]here[- ]%}', 'W')
    let l:column = col('.')
    let l:lineno = line('.')
    %s/\m{% here %}//ge
    %s/\m\s*{%-here %}//ge
    %s/\m{% here-%}\s*//ge
    %s/\m\s*{%-here-%}\s*//ge
  endif
  " will break test check {% here %}
  " restore {%.\{-}%}
  %s/\m\\{\\%\(.\{-}\)\\%\\}/{%\1%}/ge
  call cursor(l:lineno, l:column)
endfunction
